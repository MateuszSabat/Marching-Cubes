#pragma kernel CSMarchFlatInterpolate
#include "MarchTables.compute"

struct Triangle {
	float3 a;
	float3 b;
	float3 c;
};

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float4> points;

uint pointsPerAxis;
float isoLevel;


float3 interpolate(float4 a, float4 b) {
	if (abs(a.w - b.w) < 0.001f)
		return (a.xyz + b.xyz) * 0.5f;
	float t = (isoLevel - a.w) / (b.w - a.w);
	return t * b.xyz + (1.0f - t) * a.xyz;
}

uint index(uint x, uint y, uint z) {
	return x + y * pointsPerAxis + z * pointsPerAxis * pointsPerAxis;
}

[numthreads(8,8,8)]
void CSMarchFlatInterpolate(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= pointsPerAxis - 1 || id.y >= pointsPerAxis - 1 || id.z >= pointsPerAxis - 1)
		return;

	float4 corners[8] = {
		points[index(id.x, id.y, id.z)],
		points[index(id.x + 1, id.y, id.z)],
		points[index(id.x + 1, id.y, id.z + 1)],
		points[index(id.x, id.y, id.z + 1)],
		points[index(id.x, id.y + 1, id.z)],
		points[index(id.x + 1, id.y + 1, id.z)],
		points[index(id.x + 1, id.y + 1, id.z + 1)],
		points[index(id.x, id.y + 1, id.z + 1)],
	};

	int cube = 0;
	if (corners[0].w > isoLevel) cube += 1;
	if (corners[1].w > isoLevel) cube += 2;
	if (corners[2].w > isoLevel) cube += 4;
	if (corners[3].w > isoLevel) cube += 8;
	if (corners[4].w > isoLevel) cube += 16;
	if (corners[5].w > isoLevel) cube += 32;
	if (corners[6].w > isoLevel) cube += 64;
	if (corners[7].w > isoLevel) cube += 128;


	for (int i = 0; triangulation[cube][i] != -1; i += 3) {

		int a0 = cornerIndexFromEdge[triangulation[cube][i]][0];
		int a1 = cornerIndexFromEdge[triangulation[cube][i]][1];

		int b0 = cornerIndexFromEdge[triangulation[cube][i + 1]][0];
		int b1 = cornerIndexFromEdge[triangulation[cube][i + 1]][1];

		int c0 = cornerIndexFromEdge[triangulation[cube][i + 2]][0];
		int c1 = cornerIndexFromEdge[triangulation[cube][i + 2]][1];

		Triangle t;
		t.a = interpolate(corners[a0], corners[a1]);
		t.b = interpolate(corners[b0], corners[b1]);
		t.c = interpolate(corners[c0], corners[c1]);

		triangles.Append(t);
	}
}

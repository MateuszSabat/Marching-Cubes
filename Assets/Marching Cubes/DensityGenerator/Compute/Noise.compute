int gradientPointPerAxis;
StructuredBuffer<float3>gradients;

int modInGrid(int x) {
	if (x < 0)
		x += gradientPointPerAxis;
	if (x > gradientPointPerAxis)
		x -= gradientPointPerAxis;
	return x;
}

int index(int3 i) {
	i.x = modInGrid(i.x);
	i.y = modInGrid(i.y);
	i.z = modInGrid(i.z);
	return i.x + i.y * gradientPointPerAxis + i.z * gradientPointPerAxis * gradientPointPerAxis;
}

float dotGridGradient(float3 v, int3 c) {
	float3 dv = v - float3(c.x, c.y, c.z);
	return dot(dv, gradients[index(c)]);
}

float noise(float3 v) {
	v = v - floor(v / (float)gradientPointPerAxis) * (float)gradientPointPerAxis;
	int3 corner = floor(v);
	float a[2];
	for (int x = 0; x < 2; x++) {
		float b[2];
		for (int y = 0; y < 2; y++) {
			float c[2];
			for (int z = 0; z < 2; z++) {
				c[z] = dotGridGradient(v, corner + int3(x, y, z));
			}
			b[y] = lerp(c[0], c[1], (-cos(3.14159265359f * (v.z - (float)corner.z)) + 1) * 0.5f);
		}
		a[x] = lerp(b[0], b[1], (-cos(3.14159265359f * (v.y - (float)corner.y)) + 1) * 0.5f);
	}
	return lerp(a[0], a[1], (-cos(3.14159265359f * (v.x - (float)corner.x)) + 1) *0.5f);
}
